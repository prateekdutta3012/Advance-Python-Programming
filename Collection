The collections module in Python implements specialized container datatypes providing alternatives to Pythonâ€™s general purpose built-in containers, dict, list, set, and 
tuple.
The following tools exist:

namedtuple : factory function for creating tuple subclasses with named fields
OrderedDict : dict subclass that remembers the order entries were added
Counter : dict subclass for counting hashable objects
defaultdict : dict subclass that calls a factory function to supply missing values
deque : list-like container with fast appends and pops on either end

Namedtuple

namedtuples are easy to create, lightweight object types. They assign meaning to each position in a tuple and allow for more readable, self-documenting code. They can be 
used wherever regular tuples are used, and they add the ability to access fields by name instead of position index.

OrderedDict

OrderedDicts are just like regular dictionaries but they remember the order that items were inserted. When iterating over an ordered dictionary, the items are returned in 
the order their keys were first added. If a new entry overwrites an existing entry, the original insertion position is left unchanged. They have become less important now 
that the built-in dict class gained the ability to remember insertion order (guaranteed since Python 3.7). But some differences still remain, e.g. the OrderedDict is 
designed to be good at reordering operations.
