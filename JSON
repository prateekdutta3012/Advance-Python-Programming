JSON (JavaScript Object Notation) is a leightweight data format for data exchange. In Python you have the built-in json module for encoding and decoding JSON data. 
Simply import it and you are ready to work with JSON data:

import json
Some advantages of JSON:

JSON exists as a "sequence of bytes" which is very useful in the case we need to transmit (stream) data over a network.
Compared to XML, JSON is much smaller, translating into faster data transfers, and better experiences.
JSON is extremely human-friendly since it is textual, and simultaneously machine-friendly.

Working with Custom Objects
Encoding
Encoding a custom object with the default JSONEncoder will raise a TypeError. We can specify a custom encoding function that will store the class name and all 
object variables in a dictionary. Use this function for the default argument in the json.dump() method.

Decoding
Decoding a custom object with the defaut JSONDecoder is possible, but it will be decoded into a dictionary. Write a custom decode function that will take a dictionary as 
input, and creates your custom object if it can find the object class name in the dictionary. Use this function for the object_hook argument in the json.load() method.
